H1B <- H1B %>%
drop_na() %>%
mutate(CASE_STATUS = as.factor(CASE_STATUS),
CASE_STATUS = as.numeric(CASE_STATUS),
REFILE = as.factor(REFILE),
REFILE = as.numeric(REFILE),
FW_OWNERSHIP_INTEREST = as.factor(FW_OWNERSHIP_INTEREST),
FW_OWNERSHIP_INTEREST = as.numeric(FW_OWNERSHIP_INTEREST),
PW_SKILL_LEVEL = as.factor(PW_SKILL_LEVEL),
PW_SKILL_LEVEL = as.numeric(PW_SKILL_LEVEL),
WAGE_OFFER_UNIT_OF_PAY = as.factor(WAGE_OFFER_UNIT_OF_PAY),
WAGE_OFFER_UNIT_OF_PAY = as.numeric(WAGE_OFFER_UNIT_OF_PAY),
MINIMUM_EDUCATION = as.factor(MINIMUM_EDUCATION),
MINIMUM_EDUCATION = as.numeric(MINIMUM_EDUCATION),
REQUIRED_TRAINING = as.factor(REQUIRED_TRAINING),
REQUIRED_TRAINING = as.numeric(REQUIRED_TRAINING),
REQUIRED_EXPERIENCE = as.factor(REQUIRED_EXPERIENCE),
REQUIRED_EXPERIENCE = as.numeric(REQUIRED_EXPERIENCE),
ACCEPT_ALT_OCCUPATION = as.factor(ACCEPT_ALT_OCCUPATION),
ACCEPT_ALT_OCCUPATION = as.numeric(ACCEPT_ALT_OCCUPATION),
FOREIGN_LANGUAGE_REQUIRED = as.factor(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_LANGUAGE_REQUIRED = as.numeric(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_WORKER_LIVE_ON_PREM = as.factor(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_ON_PREM = as.numeric(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.factor(FOREIGN_WORKER_LIVE_IN_DOM_SER),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.numeric(FOREIGN_WORKER_LIVE_IN_DOM_SER),
PROFESSIONAL_OCCUPATION = as.factor(PROFESSIONAL_OCCUPATION),
PROFESSIONAL_OCCUPATION = as.numeric(PROFESSIONAL_OCCUPATION),
APP_FOR_COLLEGE_U_TEACHER = as.factor(APP_FOR_COLLEGE_U_TEACHER),
APP_FOR_COLLEGE_U_TEACHER = as.numeric(APP_FOR_COLLEGE_U_TEACHER),
COUNTRY_OF_CITIZENSHIP = as.factor(COUNTRY_OF_CITIZENSHIP),
COUNTRY_OF_CITIZENSHIP = as.numeric(COUNTRY_OF_CITIZENSHIP),
CLASS_OF_ADMISSION = as.factor(CLASS_OF_ADMISSION),
CLASS_OF_ADMISSION = as.numeric(CLASS_OF_ADMISSION),
FOREIGN_WORKER_EDUCATION = as.factor(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_EDUCATION = as.numeric(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_ED_INST_US = as.factor(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = as.numeric(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_REQ_EXPERIENCE = as.factor(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_REQ_EXPERIENCE = as.numeric(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_EXP_WITH_EMPL = as.factor(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = as.numeric(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.factor(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.numeric(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_CURR_EMPLOYED = as.factor(FOREIGN_WORKER_CURR_EMPLOYED),
FOREIGN_WORKER_CURR_EMPLOYED = as.numeric(FOREIGN_WORKER_CURR_EMPLOYED),
EMPLOYER_COMPLETED_APPLICATION = as.factor(EMPLOYER_COMPLETED_APPLICATION),
EMPLOYER_COMPLETED_APPLICATION = as.numeric(EMPLOYER_COMPLETED_APPLICATION)) %>%
rename(WAITING_PERIOD = Waiting_Period)
H1B <- H1B %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
glimpse(H1B)
install.packages("fastDummies")
library(fastDummies)
H1B <- read_csv("https://media.githubusercontent.com/media/ccabes15/H1B_Project_ML/main/Data/H1B_Initial_Tidy.csv")
H1B <- H1B %>%
mutate(Waiting_Period = DECISION_DATE- RECEIVED_DATE) |>
dplyr::select(-c(DECISION_DATE, RECEIVED_DATE, PW_SOC_TITLE, JOB_TITLE, EMPLOYER_NAME, EMPLOYER_CITY, EMPLOYER_STATE_PROVINCE, wAGE_OFFER_AVG, WORKSITE_CITY, WORKSITE_STATE, JOB_TITLE, ACCEPT_FOREIGN_EDUCATION, FOREIGN_WORKER_BIRTH_COUNTRY, FOREIGN_WORKER_INFO_MAJOR, FOREIGN_WORKER_YRS_ED_COMP, FOREIGN_WORKER_ED_INST_COUNTRY, FOREIGN_WORKER_ALT_ED_EXP, FOREIGN_WORKER_ALT_OCC_EXP, OFFERED_TO_APPL_FOREIGN_WORKER))
H1B <- H1B %>%
mutate(PW_WAGE_HOURLY = case_when(WAGE_OFFER_UNIT_OF_PAY == "Year" ~ PW_WAGE/2080,
WAGE_OFFER_UNIT_OF_PAY == "Month" ~ PW_WAGE/160,
WAGE_OFFER_UNIT_OF_PAY == "Bi-Weekly" ~ PW_WAGE/80,
WAGE_OFFER_UNIT_OF_PAY == "Week" ~ PW_WAGE/40)) %>%
filter(PW_WAGE_HOURLY > 5) %>%
dplyr::select(-c(PW_WAGE)) %>%
mutate(CLASS_OF_ADMISSION = if_else(is.na(CLASS_OF_ADMISSION),"UNK",CLASS_OF_ADMISSION),
PW_SKILL_LEVEL = if_else(is.na(PW_SKILL_LEVEL),0,PW_SKILL_LEVEL),
FOREIGN_WORKER_ED_INST_US = as.character(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = if_else(is.na(FOREIGN_WORKER_ED_INST_US), "UNK", FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_EXP_WITH_EMPL = as.character(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = if_else(is.na(FOREIGN_WORKER_EXP_WITH_EMPL), "UNK", FOREIGN_WORKER_EXP_WITH_EMPL))
H1B <- H1B %>%
drop_na() %>%
rename(WAITING_PERIOD = Waiting_Period) %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
glimpse(H1B)
results <- dummy_cols(.data = H1B, select_columns = c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
results
tabyl(H1B$MINIMUM_EDUCATION)
glimpse(H1B)
results
H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
H1B_dummies <- dummy_cols(.data = H1B, select_columns = c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
H1B_dummies <- H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
glimpse(H1B_dummies)
data_split <- initial_split(H1B_dummies, prop = 0.7)
set.seed(1234)
H1B_Train_dummies <- training(data_split)
H1B_Test_dummies <- testing(data_split)
write.csv(H1B_Train_dummies, file = "../Data/H1B_Train_Dummies.csv")
write.csv(H1B_Test_dummies, file = "../Data/H1B_Test_Dummies.csv")
H1B_Train_dummies
view(H1B_Train_dummies)
view(H1B_Train)
H1B_dummies_Train <- read_csv("../Data/H1B_Train_Dummies.csv")
H1B_dummies_Test <- read_csv("../Data/H1B_Test_Dummies.csv")
H1B_dummies_Test
x.train.dummies <- as.matrix(H1B_dummies_Train[,3:ncol(H1B_dummies_Train)])
y.train.dummies <- as.matrix(H1B_dummies_Train[,2])
x.test.dummies <- as.matrix(H1B_dummies_Test[,3:ncol(H1B_dummies_Test)])
y.test.dummies <- as.matrix(H1B_dummies_Test[,2])
x.test.dummies
#Running Ridge Regression
set.seed(123)
train_rr_cv <- cv.glmnet(x.train, as.factor(y.train), alpha=0, family = "binomial")
#Plot results of cross validation
plot(train_rr_cv)
#Running Ridge Regression
set.seed(123)
train_rr_cv_dummies <- cv.glmnet(x.train.dummies, as.factor(y.train.dummies), alpha=0, family = "binomial")
#Plot results of cross validation
plot(train_rr_cv_dummies)
pred_test_rr_dummies <- bind_cols(predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.1se"),
predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.min"))
pred_test_rr_dummies
summary(pred_test_rr_dummies)
pred_test_rr_dummies <- bind_cols(predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.1se", type="response"),
predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.min"))
pred_test_rr_dummies <- bind_cols(predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.1se", type="response"),
predict(train_rr_cv_dummies, newx = x.test.dummies, s = "lambda.min", type="response"))
pred_test_rr_dummies
round(colMeans((pred_test_rr_dummies - y.test.dummies)^2), digits = 2)
Predicted.rr.dummies <- ifelse(pred_test_rr_dummies >= 0.5, 1, 0)[,1]
table(H1B_Test_dummies$CASE_STATUS, Predicted.rr.dummies)
(86+26919)/(86+684+49+26919)
set.seed(123)
train_lr_cv_dummies <- cv.glmnet(x.train.dummies, as.factor(y.train.dummies), family = "binomial")
#Plotting
plot(train_lr_cv_dummies)
coef(train_lr_cv_dummies)
pred_test_lr_dummies <- bind_cols(predict(train_lr_cv_dummies, newx = x.test.dummies, s = "lambda.1se", type="response"),
predict(train_lr_cv_dummies, newx = x.test.dummies, s = "lambda.min", type="response"))
round(colMeans((pred_test_lr_dummies-y.test.dummies)^2), digits = 2)
Predicted.lr.dummies <- ifelse(pred_test_lr_dummies >= 0.5, 1, 0)[,1]
table(H1B_Test_dummies$CASE_STATUS, Predicted.lr.dummies)
(109+26911)/(109+661+57+26911)
pred_test_lr
H1B <- read_csv("https://media.githubusercontent.com/media/ccabes15/H1B_Project_ML/main/Data/H1B_Initial_Tidy.csv")
H1B <- H1B %>%
mutate(Waiting_Period = DECISION_DATE- RECEIVED_DATE) |>
dplyr::select(-c(DECISION_DATE, RECEIVED_DATE, PW_SOC_TITLE, JOB_TITLE, EMPLOYER_NAME, EMPLOYER_CITY, EMPLOYER_STATE_PROVINCE, wAGE_OFFER_AVG, WORKSITE_CITY, WORKSITE_STATE, JOB_TITLE, ACCEPT_FOREIGN_EDUCATION, FOREIGN_WORKER_BIRTH_COUNTRY, FOREIGN_WORKER_INFO_MAJOR, FOREIGN_WORKER_YRS_ED_COMP, FOREIGN_WORKER_ED_INST_COUNTRY, FOREIGN_WORKER_ALT_ED_EXP, FOREIGN_WORKER_ALT_OCC_EXP, OFFERED_TO_APPL_FOREIGN_WORKER))
H1B <- H1B %>%
mutate(PW_WAGE_HOURLY = case_when(WAGE_OFFER_UNIT_OF_PAY == "Year" ~ PW_WAGE/2080,
WAGE_OFFER_UNIT_OF_PAY == "Month" ~ PW_WAGE/160,
WAGE_OFFER_UNIT_OF_PAY == "Bi-Weekly" ~ PW_WAGE/80,
WAGE_OFFER_UNIT_OF_PAY == "Week" ~ PW_WAGE/40)) %>%
filter(PW_WAGE_HOURLY > 5) %>%
dplyr::select(-c(PW_WAGE)) %>%
mutate(CLASS_OF_ADMISSION = if_else(is.na(CLASS_OF_ADMISSION),"UNK",CLASS_OF_ADMISSION),
PW_SKILL_LEVEL = if_else(is.na(PW_SKILL_LEVEL),0,PW_SKILL_LEVEL),
FOREIGN_WORKER_ED_INST_US = as.character(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = if_else(is.na(FOREIGN_WORKER_ED_INST_US), "UNK", FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_EXP_WITH_EMPL = as.character(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = if_else(is.na(FOREIGN_WORKER_EXP_WITH_EMPL), "UNK", FOREIGN_WORKER_EXP_WITH_EMPL))
H1B <- H1B %>%
drop_na() %>%
rename(WAITING_PERIOD = Waiting_Period) %>%
mutate(REFILE = as.factor(REFILE),
REFILE = as.numeric(REFILE),
FW_OWNERSHIP_INTEREST = as.factor(FW_OWNERSHIP_INTEREST),
FW_OWNERSHIP_INTEREST = as.numeric(FW_OWNERSHIP_INTEREST),
PW_SKILL_LEVEL = as.factor(PW_SKILL_LEVEL),
PW_SKILL_LEVEL = as.numeric(PW_SKILL_LEVEL),
WAGE_OFFER_UNIT_OF_PAY = as.factor(WAGE_OFFER_UNIT_OF_PAY),
WAGE_OFFER_UNIT_OF_PAY = as.numeric(WAGE_OFFER_UNIT_OF_PAY),
MINIMUM_EDUCATION = as.factor(MINIMUM_EDUCATION),
MINIMUM_EDUCATION = as.numeric(MINIMUM_EDUCATION),
REQUIRED_TRAINING = as.factor(REQUIRED_TRAINING),
REQUIRED_TRAINING = as.numeric(REQUIRED_TRAINING),
REQUIRED_EXPERIENCE = as.factor(REQUIRED_EXPERIENCE),
REQUIRED_EXPERIENCE = as.numeric(REQUIRED_EXPERIENCE),
ACCEPT_ALT_OCCUPATION = as.factor(ACCEPT_ALT_OCCUPATION),
ACCEPT_ALT_OCCUPATION = as.numeric(ACCEPT_ALT_OCCUPATION),
FOREIGN_LANGUAGE_REQUIRED = as.factor(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_LANGUAGE_REQUIRED = as.numeric(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_WORKER_LIVE_ON_PREM = as.factor(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_ON_PREM = as.numeric(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.factor(FOREIGN_WORKER_LIVE_IN_DOM_SER),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.numeric(FOREIGN_WORKER_LIVE_IN_DOM_SER),
PROFESSIONAL_OCCUPATION = as.factor(PROFESSIONAL_OCCUPATION),
PROFESSIONAL_OCCUPATION = as.numeric(PROFESSIONAL_OCCUPATION),
APP_FOR_COLLEGE_U_TEACHER = as.factor(APP_FOR_COLLEGE_U_TEACHER),
APP_FOR_COLLEGE_U_TEACHER = as.numeric(APP_FOR_COLLEGE_U_TEACHER),
COUNTRY_OF_CITIZENSHIP = as.factor(COUNTRY_OF_CITIZENSHIP),
COUNTRY_OF_CITIZENSHIP = as.numeric(COUNTRY_OF_CITIZENSHIP),
CLASS_OF_ADMISSION = as.factor(CLASS_OF_ADMISSION),
CLASS_OF_ADMISSION = as.numeric(CLASS_OF_ADMISSION),
FOREIGN_WORKER_EDUCATION = as.factor(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_EDUCATION = as.numeric(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_ED_INST_US = as.factor(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = as.numeric(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_REQ_EXPERIENCE = as.factor(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_REQ_EXPERIENCE = as.numeric(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_EXP_WITH_EMPL = as.factor(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = as.numeric(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.factor(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.numeric(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_CURR_EMPLOYED = as.factor(FOREIGN_WORKER_CURR_EMPLOYED),
FOREIGN_WORKER_CURR_EMPLOYED = as.numeric(FOREIGN_WORKER_CURR_EMPLOYED),
EMPLOYER_COMPLETED_APPLICATION = as.factor(EMPLOYER_COMPLETED_APPLICATION),
EMPLOYER_COMPLETED_APPLICATION = as.numeric(EMPLOYER_COMPLETED_APPLICATION),
WAITING_PERIOD = as.numeric(WAITING_PERIOD))
glimpse(H1B)
data_split <- initial_split(H1B, prop = 0.7)
set.seed(1234)
H1B_Train <- training(data_split)
H1B_Test <- testing(data_split)
x.train <- as.matrix(H1B_Train[,2:ncol(H1B_Train)])
y.train <- as.matrix(H1B_Train[,1])
x.test <- as.matrix(H1B_Test[,2:ncol(H1B_Test)])
y.test <- as.matrix(H1B_Test[,1])
#Running Ridge Regression
set.seed(123)
train_rr_cv <- cv.glmnet(x.train, as.factor(y.train), alpha=0, family = "binomial")
#Plot results of cross validation
plot(train_rr_cv)
pred_test_rr <- bind_cols(predict(train_rr_cv, newx = x.test, s = "lambda.1se", type="response"),
predict(train_rr_cv, newx = x.test, s = "lambda.min", type="response"))
pred_test_rr
round(colMeans((pred_test_rr-y.test)^2), digits = 2)
Predicted.rr <- ifelse(pred_test_rr >= 0.5, 1, 0)[,1]
table(H1B_Test$CASE_STATUS, Predicted.rr)
(54+26915)/(54+736+33+26915)
set.seed(123)
train_lr_cv <- cv.glmnet(x.train, as.factor(y.train), family = "binomial")
#Plotting
plot(train_lr_cv)
coef(train_lr_cv)
pred_test_lr <- bind_cols(predict(train_lr_cv, newx = x.test, s = "lambda.1se", type="response"),
predict(train_lr_cv, newx = x.test, s = "lambda.min"), type="response")
round(colMeans((pred_test_lr-y.test)^2), digits = 2)
pred_test_lr <- bind_cols(predict(train_lr_cv, newx = x.test, s = "lambda.1se", type="response"),
predict(train_lr_cv, newx = x.test, s = "lambda.min"), type="response")
round(colMeans((pred_test_lr-y.test)^2), digits = 2)
pred_test_lr
pred_test_lr <- bind_cols(predict(train_lr_cv, newx = x.test, s = "lambda.1se", type="response"),
predict(train_lr_cv, newx = x.test, s = "lambda.min", type="response"))
round(colMeans((pred_test_lr-y.test)^2), digits = 2)
pred_test_lr
Predicted.lr <- ifelse(pred_test_lr >= 0.5, 1, 0)[,1]
table(H1B_Test$CASE_STATUS, Predicted.lr)
(54+26917)/(54+736+31+26917)
library(tidyverse)
library(lubridate)
library(tidymodels)
library(fastDummies)
H1B <- read_csv("https://media.githubusercontent.com/media/ccabes15/H1B_Project_ML/main/Data/H1B_Initial_Tidy.csv")
#adding waiting time variable and deselecting unnecessary variables
H1B <- H1B %>%
mutate(WAITING_PERIOD = DECISION_DATE- RECEIVED_DATE) |>
dplyr::select(-c(DECISION_DATE, RECEIVED_DATE, PW_SOC_TITLE, JOB_TITLE, EMPLOYER_NAME, EMPLOYER_CITY, EMPLOYER_STATE_PROVINCE, wAGE_OFFER_AVG, WORKSITE_CITY, WORKSITE_STATE, JOB_TITLE, ACCEPT_FOREIGN_EDUCATION, FOREIGN_WORKER_BIRTH_COUNTRY, FOREIGN_WORKER_INFO_MAJOR, FOREIGN_WORKER_YRS_ED_COMP, FOREIGN_WORKER_ED_INST_COUNTRY, FOREIGN_WORKER_ALT_ED_EXP, FOREIGN_WORKER_ALT_OCC_EXP, OFFERED_TO_APPL_FOREIGN_WORKER))
#Creating Hourly Wage Variable and solving NA issues with some other variables
H1B <- H1B %>%
mutate(PW_WAGE_HOURLY = case_when(WAGE_OFFER_UNIT_OF_PAY == "Year" ~ PW_WAGE/2080,
WAGE_OFFER_UNIT_OF_PAY == "Month" ~ PW_WAGE/160,
WAGE_OFFER_UNIT_OF_PAY == "Bi-Weekly" ~ PW_WAGE/80,
WAGE_OFFER_UNIT_OF_PAY == "Week" ~ PW_WAGE/40)) %>%
filter(PW_WAGE_HOURLY > 5) %>%
dplyr::select(-c(PW_WAGE)) %>%
mutate(CLASS_OF_ADMISSION = if_else(is.na(CLASS_OF_ADMISSION),"UNK",CLASS_OF_ADMISSION),
PW_SKILL_LEVEL = if_else(is.na(PW_SKILL_LEVEL),0,PW_SKILL_LEVEL),
FOREIGN_WORKER_ED_INST_US = as.character(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = if_else(is.na(FOREIGN_WORKER_ED_INST_US), "UNK", FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_EXP_WITH_EMPL = as.character(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = if_else(is.na(FOREIGN_WORKER_EXP_WITH_EMPL), "UNK", FOREIGN_WORKER_EXP_WITH_EMPL))
#Dropping remaining NA's and converting Waiting Period to Numeric
H1B <- H1B %>%
drop_na() %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
#Creating Dummy Variables
H1B_dummies <- dummy_cols(.data = H1B, select_columns = c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#Deselecting Variables that dummies were created for
H1B_dummies <- H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#For Connor's KNN
H1B <- H1B %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
mutate(CASE_STATUS = as.factor(CASE_STATUS),
CASE_STATUS = as.numeric(CASE_STATUS),
REFILE = as.factor(REFILE),
REFILE = as.numeric(REFILE),
FW_OWNERSHIP_INTEREST = as.factor(FW_OWNERSHIP_INTEREST),
FW_OWNERSHIP_INTEREST = as.numeric(FW_OWNERSHIP_INTEREST),
PW_SKILL_LEVEL = as.factor(PW_SKILL_LEVEL),
PW_SKILL_LEVEL = as.numeric(PW_SKILL_LEVEL),
WAGE_OFFER_UNIT_OF_PAY = as.factor(WAGE_OFFER_UNIT_OF_PAY),
WAGE_OFFER_UNIT_OF_PAY = as.numeric(WAGE_OFFER_UNIT_OF_PAY),
MINIMUM_EDUCATION = as.factor(MINIMUM_EDUCATION),
MINIMUM_EDUCATION = as.numeric(MINIMUM_EDUCATION),
REQUIRED_TRAINING = as.factor(REQUIRED_TRAINING),
REQUIRED_TRAINING = as.numeric(REQUIRED_TRAINING),
REQUIRED_EXPERIENCE = as.factor(REQUIRED_EXPERIENCE),
REQUIRED_EXPERIENCE = as.numeric(REQUIRED_EXPERIENCE),
ACCEPT_ALT_OCCUPATION = as.factor(ACCEPT_ALT_OCCUPATION),
ACCEPT_ALT_OCCUPATION = as.numeric(ACCEPT_ALT_OCCUPATION),
FOREIGN_LANGUAGE_REQUIRED = as.factor(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_LANGUAGE_REQUIRED = as.numeric(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_WORKER_LIVE_ON_PREM = as.factor(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_ON_PREM = as.numeric(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.factor(FOREIGN_WORKER_LIVE_IN_DOM_SER),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.numeric(FOREIGN_WORKER_LIVE_IN_DOM_SER),
PROFESSIONAL_OCCUPATION = as.factor(PROFESSIONAL_OCCUPATION),
PROFESSIONAL_OCCUPATION = as.numeric(PROFESSIONAL_OCCUPATION),
APP_FOR_COLLEGE_U_TEACHER = as.factor(APP_FOR_COLLEGE_U_TEACHER),
APP_FOR_COLLEGE_U_TEACHER = as.numeric(APP_FOR_COLLEGE_U_TEACHER),
COUNTRY_OF_CITIZENSHIP = as.factor(COUNTRY_OF_CITIZENSHIP),
COUNTRY_OF_CITIZENSHIP = as.numeric(COUNTRY_OF_CITIZENSHIP),
CLASS_OF_ADMISSION = as.factor(CLASS_OF_ADMISSION),
CLASS_OF_ADMISSION = as.numeric(CLASS_OF_ADMISSION),
FOREIGN_WORKER_EDUCATION = as.factor(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_EDUCATION = as.numeric(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_ED_INST_US = as.factor(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = as.numeric(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_REQ_EXPERIENCE = as.factor(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_REQ_EXPERIENCE = as.numeric(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_EXP_WITH_EMPL = as.factor(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = as.numeric(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.factor(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.numeric(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_CURR_EMPLOYED = as.factor(FOREIGN_WORKER_CURR_EMPLOYED),
FOREIGN_WORKER_CURR_EMPLOYED = as.numeric(FOREIGN_WORKER_CURR_EMPLOYED),
EMPLOYER_COMPLETED_APPLICATION = as.factor(EMPLOYER_COMPLETED_APPLICATION),
EMPLOYER_COMPLETED_APPLICATION = as.numeric(EMPLOYER_COMPLETED_APPLICATION))
H1B <- read_csv("https://media.githubusercontent.com/media/ccabes15/H1B_Project_ML/main/Data/H1B_Initial_Tidy.csv")
#adding waiting time variable and deselecting unnecessary variables
H1B <- H1B %>%
mutate(WAITING_PERIOD = DECISION_DATE- RECEIVED_DATE) |>
dplyr::select(-c(DECISION_DATE, RECEIVED_DATE, PW_SOC_TITLE, JOB_TITLE, EMPLOYER_NAME, EMPLOYER_CITY, EMPLOYER_STATE_PROVINCE, wAGE_OFFER_AVG, WORKSITE_CITY, WORKSITE_STATE, JOB_TITLE, ACCEPT_FOREIGN_EDUCATION, FOREIGN_WORKER_BIRTH_COUNTRY, FOREIGN_WORKER_INFO_MAJOR, FOREIGN_WORKER_YRS_ED_COMP, FOREIGN_WORKER_ED_INST_COUNTRY, FOREIGN_WORKER_ALT_ED_EXP, FOREIGN_WORKER_ALT_OCC_EXP, OFFERED_TO_APPL_FOREIGN_WORKER))
#Creating Hourly Wage Variable and solving NA issues with some other variables
H1B <- H1B %>%
mutate(PW_WAGE_HOURLY = case_when(WAGE_OFFER_UNIT_OF_PAY == "Year" ~ PW_WAGE/2080,
WAGE_OFFER_UNIT_OF_PAY == "Month" ~ PW_WAGE/160,
WAGE_OFFER_UNIT_OF_PAY == "Bi-Weekly" ~ PW_WAGE/80,
WAGE_OFFER_UNIT_OF_PAY == "Week" ~ PW_WAGE/40)) %>%
filter(PW_WAGE_HOURLY > 5) %>%
dplyr::select(-c(PW_WAGE)) %>%
mutate(CLASS_OF_ADMISSION = if_else(is.na(CLASS_OF_ADMISSION),"UNK",CLASS_OF_ADMISSION),
PW_SKILL_LEVEL = if_else(is.na(PW_SKILL_LEVEL),0,PW_SKILL_LEVEL),
FOREIGN_WORKER_ED_INST_US = as.character(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = if_else(is.na(FOREIGN_WORKER_ED_INST_US), "UNK", FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_EXP_WITH_EMPL = as.character(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = if_else(is.na(FOREIGN_WORKER_EXP_WITH_EMPL), "UNK", FOREIGN_WORKER_EXP_WITH_EMPL))
#Dropping remaining NA's and converting Waiting Period to Numeric
H1B <- H1B %>%
drop_na() %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
glimpse(H1B)
#Creating Dummy Variables
H1B_dummies <- dummy_cols(.data = H1B, select_columns = c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#Deselecting Variables that dummies were created for
H1B_dummies <- H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#For Connor's KNN
H1B <- H1B %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD)) %>%
mutate(CASE_STATUS = as.factor(CASE_STATUS),
CASE_STATUS = as.numeric(CASE_STATUS),
REFILE = as.factor(REFILE),
REFILE = as.numeric(REFILE),
FW_OWNERSHIP_INTEREST = as.factor(FW_OWNERSHIP_INTEREST),
FW_OWNERSHIP_INTEREST = as.numeric(FW_OWNERSHIP_INTEREST),
PW_SKILL_LEVEL = as.factor(PW_SKILL_LEVEL),
PW_SKILL_LEVEL = as.numeric(PW_SKILL_LEVEL),
WAGE_OFFER_UNIT_OF_PAY = as.factor(WAGE_OFFER_UNIT_OF_PAY),
WAGE_OFFER_UNIT_OF_PAY = as.numeric(WAGE_OFFER_UNIT_OF_PAY),
MINIMUM_EDUCATION = as.factor(MINIMUM_EDUCATION),
MINIMUM_EDUCATION = as.numeric(MINIMUM_EDUCATION),
REQUIRED_TRAINING = as.factor(REQUIRED_TRAINING),
REQUIRED_TRAINING = as.numeric(REQUIRED_TRAINING),
REQUIRED_EXPERIENCE = as.factor(REQUIRED_EXPERIENCE),
REQUIRED_EXPERIENCE = as.numeric(REQUIRED_EXPERIENCE),
ACCEPT_ALT_OCCUPATION = as.factor(ACCEPT_ALT_OCCUPATION),
ACCEPT_ALT_OCCUPATION = as.numeric(ACCEPT_ALT_OCCUPATION),
FOREIGN_LANGUAGE_REQUIRED = as.factor(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_LANGUAGE_REQUIRED = as.numeric(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_WORKER_LIVE_ON_PREM = as.factor(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_ON_PREM = as.numeric(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.factor(FOREIGN_WORKER_LIVE_IN_DOM_SER),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.numeric(FOREIGN_WORKER_LIVE_IN_DOM_SER),
PROFESSIONAL_OCCUPATION = as.factor(PROFESSIONAL_OCCUPATION),
PROFESSIONAL_OCCUPATION = as.numeric(PROFESSIONAL_OCCUPATION),
APP_FOR_COLLEGE_U_TEACHER = as.factor(APP_FOR_COLLEGE_U_TEACHER),
APP_FOR_COLLEGE_U_TEACHER = as.numeric(APP_FOR_COLLEGE_U_TEACHER),
COUNTRY_OF_CITIZENSHIP = as.factor(COUNTRY_OF_CITIZENSHIP),
COUNTRY_OF_CITIZENSHIP = as.numeric(COUNTRY_OF_CITIZENSHIP),
CLASS_OF_ADMISSION = as.factor(CLASS_OF_ADMISSION),
CLASS_OF_ADMISSION = as.numeric(CLASS_OF_ADMISSION),
FOREIGN_WORKER_EDUCATION = as.factor(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_EDUCATION = as.numeric(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_ED_INST_US = as.factor(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = as.numeric(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_REQ_EXPERIENCE = as.factor(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_REQ_EXPERIENCE = as.numeric(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_EXP_WITH_EMPL = as.factor(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = as.numeric(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.factor(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.numeric(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_CURR_EMPLOYED = as.factor(FOREIGN_WORKER_CURR_EMPLOYED),
FOREIGN_WORKER_CURR_EMPLOYED = as.numeric(FOREIGN_WORKER_CURR_EMPLOYED),
EMPLOYER_COMPLETED_APPLICATION = as.factor(EMPLOYER_COMPLETED_APPLICATION),
EMPLOYER_COMPLETED_APPLICATION = as.numeric(EMPLOYER_COMPLETED_APPLICATION))
library(tidyverse)
library(lubridate)
library(tidymodels)
library(fastDummies)
H1B <- read_csv("https://media.githubusercontent.com/media/ccabes15/H1B_Project_ML/main/Data/H1B_Initial_Tidy.csv")
#adding waiting time variable and deselecting unnecessary variables
H1B <- H1B %>%
mutate(WAITING_PERIOD = DECISION_DATE- RECEIVED_DATE) |>
dplyr::select(-c(DECISION_DATE, RECEIVED_DATE, PW_SOC_TITLE, JOB_TITLE, EMPLOYER_NAME, EMPLOYER_CITY, EMPLOYER_STATE_PROVINCE, wAGE_OFFER_AVG, WORKSITE_CITY, WORKSITE_STATE, JOB_TITLE, ACCEPT_FOREIGN_EDUCATION, FOREIGN_WORKER_BIRTH_COUNTRY, FOREIGN_WORKER_INFO_MAJOR, FOREIGN_WORKER_YRS_ED_COMP, FOREIGN_WORKER_ED_INST_COUNTRY, FOREIGN_WORKER_ALT_ED_EXP, FOREIGN_WORKER_ALT_OCC_EXP, OFFERED_TO_APPL_FOREIGN_WORKER))
#Creating Hourly Wage Variable and solving NA issues with some other variables
H1B <- H1B %>%
mutate(PW_WAGE_HOURLY = case_when(WAGE_OFFER_UNIT_OF_PAY == "Year" ~ PW_WAGE/2080,
WAGE_OFFER_UNIT_OF_PAY == "Month" ~ PW_WAGE/160,
WAGE_OFFER_UNIT_OF_PAY == "Bi-Weekly" ~ PW_WAGE/80,
WAGE_OFFER_UNIT_OF_PAY == "Week" ~ PW_WAGE/40)) %>%
filter(PW_WAGE_HOURLY > 5) %>%
dplyr::select(-c(PW_WAGE)) %>%
mutate(CLASS_OF_ADMISSION = if_else(is.na(CLASS_OF_ADMISSION),"UNK",CLASS_OF_ADMISSION),
PW_SKILL_LEVEL = if_else(is.na(PW_SKILL_LEVEL),0,PW_SKILL_LEVEL),
FOREIGN_WORKER_ED_INST_US = as.character(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = if_else(is.na(FOREIGN_WORKER_ED_INST_US), "UNK", FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_EXP_WITH_EMPL = as.character(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = if_else(is.na(FOREIGN_WORKER_EXP_WITH_EMPL), "UNK", FOREIGN_WORKER_EXP_WITH_EMPL))
#Dropping remaining NA's and converting Waiting Period to Numeric
H1B <- H1B %>%
drop_na() %>%
mutate(WAITING_PERIOD = as.numeric(WAITING_PERIOD))
#Creating Dummy Variables
H1B_dummies <- dummy_cols(.data = H1B, select_columns = c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#Deselecting Variables that dummies were created for
H1B_dummies <- H1B_dummies %>%
select(-c("PW_SKILL_LEVEL", "WAGE_OFFER_UNIT_OF_PAY", "MINIMUM_EDUCATION", "COUNTRY_OF_CITIZENSHIP", "CLASS_OF_ADMISSION", "FOREIGN_WORKER_EDUCATION", "FOREIGN_WORKER_ED_INST_US", "FOREIGN_WORKER_REQ_EXPERIENCE", "FOREIGN_WORKER_EXP_WITH_EMPL"))
#For Connor's KNN
H1B <- H1B %>%
mutate(CASE_STATUS = as.factor(CASE_STATUS),
CASE_STATUS = as.numeric(CASE_STATUS),
REFILE = as.factor(REFILE),
REFILE = as.numeric(REFILE),
FW_OWNERSHIP_INTEREST = as.factor(FW_OWNERSHIP_INTEREST),
FW_OWNERSHIP_INTEREST = as.numeric(FW_OWNERSHIP_INTEREST),
PW_SKILL_LEVEL = as.factor(PW_SKILL_LEVEL),
PW_SKILL_LEVEL = as.numeric(PW_SKILL_LEVEL),
WAGE_OFFER_UNIT_OF_PAY = as.factor(WAGE_OFFER_UNIT_OF_PAY),
WAGE_OFFER_UNIT_OF_PAY = as.numeric(WAGE_OFFER_UNIT_OF_PAY),
MINIMUM_EDUCATION = as.factor(MINIMUM_EDUCATION),
MINIMUM_EDUCATION = as.numeric(MINIMUM_EDUCATION),
REQUIRED_TRAINING = as.factor(REQUIRED_TRAINING),
REQUIRED_TRAINING = as.numeric(REQUIRED_TRAINING),
REQUIRED_EXPERIENCE = as.factor(REQUIRED_EXPERIENCE),
REQUIRED_EXPERIENCE = as.numeric(REQUIRED_EXPERIENCE),
ACCEPT_ALT_OCCUPATION = as.factor(ACCEPT_ALT_OCCUPATION),
ACCEPT_ALT_OCCUPATION = as.numeric(ACCEPT_ALT_OCCUPATION),
FOREIGN_LANGUAGE_REQUIRED = as.factor(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_LANGUAGE_REQUIRED = as.numeric(FOREIGN_LANGUAGE_REQUIRED),
FOREIGN_WORKER_LIVE_ON_PREM = as.factor(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_ON_PREM = as.numeric(FOREIGN_WORKER_LIVE_ON_PREM),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.factor(FOREIGN_WORKER_LIVE_IN_DOM_SER),
FOREIGN_WORKER_LIVE_IN_DOM_SER = as.numeric(FOREIGN_WORKER_LIVE_IN_DOM_SER),
PROFESSIONAL_OCCUPATION = as.factor(PROFESSIONAL_OCCUPATION),
PROFESSIONAL_OCCUPATION = as.numeric(PROFESSIONAL_OCCUPATION),
APP_FOR_COLLEGE_U_TEACHER = as.factor(APP_FOR_COLLEGE_U_TEACHER),
APP_FOR_COLLEGE_U_TEACHER = as.numeric(APP_FOR_COLLEGE_U_TEACHER),
COUNTRY_OF_CITIZENSHIP = as.factor(COUNTRY_OF_CITIZENSHIP),
COUNTRY_OF_CITIZENSHIP = as.numeric(COUNTRY_OF_CITIZENSHIP),
CLASS_OF_ADMISSION = as.factor(CLASS_OF_ADMISSION),
CLASS_OF_ADMISSION = as.numeric(CLASS_OF_ADMISSION),
FOREIGN_WORKER_EDUCATION = as.factor(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_EDUCATION = as.numeric(FOREIGN_WORKER_EDUCATION),
FOREIGN_WORKER_ED_INST_US = as.factor(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_ED_INST_US = as.numeric(FOREIGN_WORKER_ED_INST_US),
FOREIGN_WORKER_REQ_EXPERIENCE = as.factor(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_REQ_EXPERIENCE = as.numeric(FOREIGN_WORKER_REQ_EXPERIENCE),
FOREIGN_WORKER_EXP_WITH_EMPL = as.factor(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EXP_WITH_EMPL = as.numeric(FOREIGN_WORKER_EXP_WITH_EMPL),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.factor(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_EMPL_PAY_FOR_ED = as.numeric(FOREIGN_WORKER_EMPL_PAY_FOR_ED),
FOREIGN_WORKER_CURR_EMPLOYED = as.factor(FOREIGN_WORKER_CURR_EMPLOYED),
FOREIGN_WORKER_CURR_EMPLOYED = as.numeric(FOREIGN_WORKER_CURR_EMPLOYED),
EMPLOYER_COMPLETED_APPLICATION = as.factor(EMPLOYER_COMPLETED_APPLICATION),
EMPLOYER_COMPLETED_APPLICATION = as.numeric(EMPLOYER_COMPLETED_APPLICATION))
#glimpse(H1B)
data_split <- initial_split(H1B, prop = 0.7)
set.seed(1234)
H1B_Train <- training(data_split)
H1B_Test <- testing(data_split)
write.csv(H1B_Train, file = "../Data/H1B_Train.csv")
write.csv(H1B_Test, file = "../Data/H1B_Test.csv")
data_split <- initial_split(H1B_dummies, prop = 0.7)
set.seed(1234)
H1B_Train_dummies <- training(data_split)
H1B_Test_dummies <- testing(data_split)
write.csv(H1B_Train_dummies, file = "../Data/H1B_Train_Dummies.csv")
write.csv(H1B_Test_dummies, file = "../Data/H1B_Test_Dummies.csv")
?data_split
?initial_split
set.seed(1234)
data_split <- initial_split(H1B, prop = 0.7)
H1B_Train <- training(data_split)
H1B_Test <- testing(data_split)
write.csv(H1B_Train, file = "../Data/H1B_Train.csv")
write.csv(H1B_Test, file = "../Data/H1B_Test.csv")
set.seed(1234)
data_split <- initial_split(H1B_dummies, prop = 0.7)
H1B_Train_dummies <- training(data_split)
H1B_Test_dummies <- testing(data_split)
write.csv(H1B_Train_dummies, file = "../Data/H1B_Train_Dummies.csv")
write.csv(H1B_Test_dummies, file = "../Data/H1B_Test_Dummies.csv")
