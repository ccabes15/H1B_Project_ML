#Running Lasso Regression
train_lr1_2a <- glmnet(x_train, y_train)
set.seed(123)
train_lr1_cv <- cv.glmnet(x_train, y_train)
pred_test_lr1 <- bind_cols(predict(train_lr1_cv, newx = x_test, s = "lambda.1se"),
predict(train_lr1_cv, newx = x_test, s = "lambda.min"))
round(colMeans((pred_test_lr1-y_test)^2), digits = 2)
#Running PCR
set.seed(123)
pcr_reg_2a <- pcr(crim ~ ., data = Boston, scale =TRUE,
validation = "CV")
msep_pcr_2a <- MSEP(pcr_reg_2a)
model_pcr_2a
msep_pcr_2a
#Running PLS
set.seed(123)
pls_reg_2a <- plsr(crim ~ ., data = Boston, scale =TRUE,
validation = "CV")
msep_pls_2a <- MSEP(pls_reg)
msep_pls_2a
msep_pls_2a <- MSEP(pls_reg_2a)
msep_pls_2a
msep_pcr_2a
reg.2a.CV$delta
reg_2a_CV <- cv.glm(Boston, reg_2a_reduc)
reg_2a_CV$delta
round(colMeans((pred_test_rr1-y_test)^2), digits = 2)
round(colMeans((pred_test_lr1-y_test)^2), digits = 2)
?pls
?subset
?regsubsets
reg_2a_summary$outmat
reg_2a_summary$which
?MSEP
MESP(reg.2a)
MSEP(reg.2a)
MSEP(reg_2a)
reg_2a_summary$which
type(reg_2a_summary$which)
class(reg_2a_summary$which)
reg_2a_CV <- cv.glm(Boston, reg_2a)
#summary(pcr_reg)
validationplot(pcr_reg_2a)
?validationplot
msep_pcr_2a
#summary(pcr_reg)
validationplot(pcr_reg_2a)
validationplot(pls_reg_2a)
reg_2a_summary$rss
reg_2a_summary
Boston$crim
suppressMessages(library(tidyverse))
df.2b <- data.frame(R2 = reg_2a_summary$adjr2, nvar = 1: length(reg_2a_summary$adjr2))
ggplot(df.2b, (aes(nvar, R2))) +
geom_line()
reg_2a_summary$which
glm(crim ~ . - age, data = Boston)
glm(crim ~ . - age - chas, data = Boston)
set.seed(123)
n <-  length(Boston$crim)
Z <-  sample(n, .5*n)
models.2b <- list(
model1 = glm(crim ~ rad, data = Boston),
model2 = glm(crim ~ rad + lstat, data = Boston),
model3 = glm(crim ~ rad + black + lstat, data = Boston),
model4 = glm(crim ~ zn + dis + rad + medv, data = Boston),
model5 = glm(crim ~ zn + dis + rad + black + medv, data = Boston),
model6 = glm(crim ~ zn + nox + dis + rad + black + medv, data = Boston),
model7 = glm(crim ~ zn + nox + dis + rad + ptratio + black + medv, data = Boston),
model8 = glm(crim ~ . - age - chas - tax - rm - indus, data = Boston),
model9 = glm(crim ~ . - age - chas - tax - rm, data = Boston),
model10 = glm(crim ~ . - age - chas - tax, data = Boston),
model11 = glm(crim ~ . - age - chas, data = Boston),
model12 = glm(crim ~ . - age, data = Boston),
model13 = glm(crim ~ ., data = Boston)
)
getMSE <- function(model) {
Yhat <-  predict(reg, College)
mean((Yhat[-Z] - Boston$crim[-Z])^2)
}
sapply(models, getMSE)
sapply(models.2b, getMSE)
getMSE <- function(model) {
Yhat <-  predict(model, Boston)
mean((Yhat[-Z] - Boston$crim[-Z])^2)
}
sapply(models.2b, getMSE)
reg_2a_reduc <- glm(crim ~ zn + nox + dis + rad + ptratio + black + lstat + medv, data = Boston)
reg_2a_CV <- cv.glm(Boston, reg_2a_reduc)
reg_2a_CV$delta
reg_2a_CV
sapply(models.2b, getMSE)
msep_pcr_2a
msep_pls_2a
sapply(models.2b, getMSE)
set.seed(123)
n <-  length(Boston$crim)
Z <-  sample(n, .5*n)
models.2b <- list(
model1 = glm(crim ~ rad, data = Boston),
model2 = glm(crim ~ rad + lstat, data = Boston),
model3 = glm(crim ~ rad + black + lstat, data = Boston),
model4 = glm(crim ~ zn + dis + rad + medv, data = Boston),
model5 = glm(crim ~ zn + dis + rad + black + medv, data = Boston),
model6 = glm(crim ~ zn + nox + dis + rad + black + medv, data = Boston),
model7 = glm(crim ~ zn + nox + dis + rad + ptratio + black + medv, data = Boston),
model8 = glm(crim ~ . - age - chas - tax - rm - indus, data = Boston),
model9 = glm(crim ~ . - age - chas - tax - rm, data = Boston),
model10 = glm(crim ~ . - age - chas - tax, data = Boston),
model11 = glm(crim ~ . - age - chas, data = Boston),
model12 = glm(crim ~ . - age, data = Boston),
model13 = glm(crim ~ ., data = Boston)
)
getMSE <- function(model) {
Yhat <-  predict(model, Boston)
MSE <- mean((Yhat[-Z] - Boston$crim[-Z])^2)
MSE
}
sapply(models.2b, getMSE)
getMSE2 <- function(model) {
regCVk10 <- cv.glm(Boston, model, K = 10)
regCVk10$delta[2]
}
sapply(models.2b, getMSE2)
getMSE2 <- function(model) {
regCV <- cv.glm(Boston, model, K=10)
regCV$delta[2]
}
sapply(models.2b, getMSE2)
getMSE2 <- function(model) {
set.seed(123)
regCV <- cv.glm(Boston, model, K=10)
regCV$delta[2]
}
sapply(models.2b, getMSE2)
getMSE <- function(model) {
set.seed(123)
regCV <- cv.glm(Boston, model, K=10)
regCV$delta[2]
}
subset_MSE <- sapply(models.2b, getMSE)
df.2b <- data.frame(R2 = reg_2a_summary$adjr2, MSE = subset_MSE, nvar = 1: length(reg_2a_summary$adjr2))
df.2b
ggplot(df.2b, (aes(nvar, MSE))) +
geom_line()
reg_2a_summary
pcr_reg_2a
summary(pcr_reg_2a)
reg_2a
summary(reg.2a)
summary(reg_2a)
msep_pcr_2a
R2_pcr_2a <- R2(pcr_reg_2a)
msep_pls_2a
msep_pls_2b[,1]
msep_pls_2b <- MSEP(pls_reg_2a)
msep_pls_2b[,1]
msep_pls_2b[1,]
msep_pls_2b[1]
msep_pls_2b[,1]
R2_pls_2b <- R2(pls_reg_2a)
R2_pls_2b
class(R2_pls_2b)
R2_pls_2b$val
R2_pls_2b
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = R2_pcr_2b, nvar = 1: length(reg_2a_summary$adjr2))
R2_pcr_2b <- R2(pcr_reg_2a)
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = R2_pcr_2b, nvar = 1: length(reg_2a_summary$adjr2))
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = R2_pcr_2b$val, nvar = 1: length(reg_2a_summary$adjr2))
df.2b
R2_pcr_2b$call
R2_pcr_2b$comps
R2_pcr_2b$cumulative
R2_pcr_2b$type
R2_pcr_2b$val
R2_pcr_2b$val$estimate
as.data.frame(R2_pls_2b$val)
m<-as.data.frame(R2_pls_2b$val)
m[1,]
m[,2]
m[,2:14]
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = m[,2:14], nvar = 1: length(reg_2a_summary$adjr2))
df.2b
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = m[1,2:14], nvar = 1: length(reg_2a_summary$adjr2))
df.2b
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = m, nvar = 1: length(reg_2a_summary$adjr2))
df.2b
m<-as.vector(R2_pls_2b$val)
m
m[2:14]
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = m[2:14], nvar = 1: length(reg_2a_summary$adjr2))
df.2b
R2_pls_2b <- as.vector(R2(pls_reg_2a))
R2_pls_2b
m<-as.vector(R2_pls_2b$val)[2:14]
m
df.2b <- data.frame(R2_subset = reg_2a_summary$adjr2, MSE = subset_MSE, R2_PCR = as.vector(R2_pls_2b$val)[2:14], nvar = 1: length(reg_2a_summary$adjr2))
df.2b
R2_pls_2b <- R2(pls_reg_2a)
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE)
df.2b
msep_pcr_2b <- MSEP(pcr_reg_2a)
msep_pcr_2b$val
msep_pcr_2b$val$CV
m<-as.vector(msep_pcr_2b$val)
m
m<-as.data.frame(msep_pcr_2b$val)
m
m[2,]
m[1,2:14]
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE, MSE = m[1,2:14])
df.2b
n<-as.vector(m[1,])
n
n[2:14]
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE, MSE = n[2:14])
df.2b
class(msep_pcr_2b)
class(msep_pcr_2b$val)
m<-msep_pcr_2b$val
class(m)
m[1,1,2:14]
m
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE, MSE = m[1,1,2:14])
df.2b
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b[1,1,2:14])
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = as.vector(R2_pls_2b$val)[2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14])
df.2b
m<-R2_pls_2b$val
m[1,1,2:14]
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = as.vector(R2_pcr_2b$val)[2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14])
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14])
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14], MSE_PCR = msep_pls_2b$val[1,1,2:14])
df.2b
df.2b <- data.frame(nvar = 1: length(reg_2a_summary$adjr2), R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14], MSE_PLS = msep_pls_2b$val[1,1,2:14])
df.2b
df.2b <- data.frame(Variables = 1:13, R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14], MSE_PLS = msep_pls_2b$val[1,1,2:14])
df.2b
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset), color = "darkred") +
geom_line(aes(y = R2_PCR), color="steelblue") +
geom_line(aes(y = R2_PLS), color="green")
plot(R2(pcr_reg_2a))
df.2b <- data.frame(Variables = 0:13, R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,2:14], R2_PLS = R2_pls_2b$val[1,1,2:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,2:14], MSE_PLS = msep_pls_2b$val[1,1,2:14])
df.2b <- data.frame(Variables = 0:13, R2_Subset = reg_2a_summary$adjr2, R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
R2_pls_2b
R2_pcr_2b
reg_2a_summary$adjr2
m <-reg_2a_summary$adjr2
class(m)
m<-as.vector(reg_2a_summary$adjr2)
m
class(m)
m <- c(0, reg_2a_summary$adjr2)
m
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,reg_2a_summary$adjr2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
m<-0:13
m
m<-c(0,reg_2a_summary$adjr2)
m
m<-R2_pcr_2b$val[1,1,1:14]
m
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,reg_2a_summary$adjr2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
m<-c(0,reg_2a_summary$adjr2)
df.2b <- data.frame(Variables = 0:13, R2_Subset = m, R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = subset_MSE, MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
plot(MSEP(pls_reg_2a))
msep_pcr_2b$val[1,1,1:14]
msep_pls_2b$val[1,1,1:14]
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,reg_2a_summary$adjr2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = c(74.13309, subset_MSE), MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset), color = "darkred") +
geom_line(aes(y = R2_PCR), color="steelblue") +
geom_line(aes(y = R2_PLS), color="green")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "darkred") +
geom_line(aes(y = MSE_PCR), color="steelblue") +
geom_line(aes(y = MSE_PLS), color="green")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "darkred") +
geom_line(aes(y = MSE_PCR), color="steelblue") +
geom_line(aes(y = MSE_PLS), color="darkgreen")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset), color = "F8766D") +
geom_line(aes(y = R2_PCR), color="00BA38") +
geom_line(aes(y = R2_PLS), color="619CFF")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "darkred") +
geom_line(aes(y = MSE_PCR), color="steelblue") +
geom_line(aes(y = MSE_PLS), color="forestgreen")
?geom_line
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "darkred", show.legend = "MSE_Subset") +
geom_line(aes(y = MSE_PCR), color="steelblue") +
geom_line(aes(y = MSE_PLS), color="forestgreen")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "darkred", show.legend = T) +
geom_line(aes(y = MSE_PCR), color="steelblue") +
geom_line(aes(y = MSE_PLS), color="forestgreen")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "MSE_Subset", size) +
geom_line(aes(y = MSE_PCR), color="MSE_PCR") +
geom_line(aes(y = MSE_PLS), color="MSE_PLS")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset), color = "MSE_Subset") +
geom_line(aes(y = MSE_PCR), color="MSE_PCR") +
geom_line(aes(y = MSE_PLS), color="MSE_PLS")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset, color = "MSE_Subset")) +
geom_line(aes(y = MSE_PCR, color="MSE_PCR")) +
geom_line(aes(y = MSE_PLS, color="MSE_PLS"))
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset")) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset")) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = c(0,14,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset")) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = c(0,2,13)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset")) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = seq(0,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset")) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset, color = "MSE_Subset")) +
geom_line(aes(y = MSE_PCR, color="MSE_PCR")) +
geom_line(aes(y = MSE_PLS, color="MSE_PLS")) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("PMSE") +
ggtitle("Predicted Mean-Squared Error Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), size = 0.6) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), size = 1) +
geom_line(aes(y = R2_PCR, color="R2_PCR")) +
geom_line(aes(y = R2_PLS, color="R2_PLS")) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), size = 1) +
geom_line(aes(y = R2_PCR, color="R2_PCR"), size = 1) +
geom_line(aes(y = R2_PLS, color="R2_PLS"), size = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset, color = "MSE_Subset"), size = 1) +
geom_line(aes(y = MSE_PCR, color="MSE_PCR"), size = 1) +
geom_line(aes(y = MSE_PLS, color="MSE_PLS"), size = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("PMSE") +
ggtitle("Predicted Mean-Squared Error Comparison")
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,reg_2a_summary$adjr2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = c(75, subset_MSE), MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), size = 1) +
geom_line(aes(y = R2_PCR, color="R2_PCR"), size = 1) +
geom_line(aes(y = R2_PLS, color="R2_PLS"), size = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset, color = "MSE_Subset"), size = 1) +
geom_line(aes(y = MSE_PCR, color="MSE_PCR"), size = 1) +
geom_line(aes(y = MSE_PLS, color="MSE_PLS"), size = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("PMSE") +
ggtitle("Predicted Mean-Squared Error Comparison")
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), size = 1) +
geom_line(aes(y = R2_PCR, color="R2_PCR"), size = 1) +
geom_line(aes(y = R2_PLS, color="R2_PLS"), size = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
#Getting R-Squared for all values of K for subset regression
subset_R2 <- reg_2a_summary$adjr2
#Creating a data frame
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,subset_R2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = c(75, subset_MSE), MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14])
df.2b
kable(df.2b)
?kable
knitr::kable(df.2b)
knitr::kable(df.2b, digits = 3, caption = "Dimension Reduction Method Comparison")
summary(pcr_reg_2a)
Boston <- MASS::Boston
#Running Subsets
reg_2a <- regsubsets(crim ~ ., data = Boston, nvmax = 13)
reg_2a_summary <- summary(reg_2a)
summary(reg_2a)
which.max(reg_2a_summary$adjr2)
reg_2a_summary$which[9,] #zn, indus, nox, dis, rad, ptratio, black, lstat, medv
which.min(reg_2a_summary$bic)
reg_2a_summary$which[3,] #rad, black, lstat
which.min(abs(reg_2a_summary$cp-0:12))
reg_2a_summary$which[10,] #zn, indus, nox, rm, dis, rad, ptratio, black, lstat, medv
#Running PCR
set.seed(123)
pcr_reg_2a <- pcr(crim ~ ., data = Boston, scale =TRUE,
validation = "CV")
summary(pcr_reg_2a)
#Running PLS
set.seed(123)
pls_reg_2a <- plsr(crim ~ ., data = Boston, scale =TRUE,
validation = "CV")
summary(pls_reg_2a)
#Getting R-Squared for all values of K for subset regression
subset_R2 <- reg_2a_summary$adjr2
#Getting MSE for all values of K for subset regression
#1. creating model list from #reg_2a_summary$which
models.2b <- list(
model1 = glm(crim ~ rad, data = Boston),
model2 = glm(crim ~ rad + lstat, data = Boston),
model3 = glm(crim ~ rad + black + lstat, data = Boston),
model4 = glm(crim ~ zn + dis + rad + medv, data = Boston),
model5 = glm(crim ~ zn + dis + rad + black + medv, data = Boston),
model6 = glm(crim ~ zn + nox + dis + rad + black + medv, data = Boston),
model7 = glm(crim ~ zn + nox + dis + rad + ptratio + black + medv, data = Boston),
model8 = glm(crim ~ . - age - chas - tax - rm - indus, data = Boston),
model9 = glm(crim ~ . - age - chas - tax - rm, data = Boston),
model10 = glm(crim ~ . - age - chas - tax, data = Boston),
model11 = glm(crim ~ . - age - chas, data = Boston),
model12 = glm(crim ~ . - age, data = Boston),
model13 = glm(crim ~ ., data = Boston)
)
#Creating function for cross validation
getMSE <- function(model) {
set.seed(123)
regCV <- cv.glm(Boston, model, K=10)
regCV$delta[2]
}
#Getting MSE output
subset_MSE <- sapply(models.2b, getMSE)
#Getting MSE and R-sqaured values from PCR
msep_pcr_2b <- MSEP(pcr_reg_2a)
R2_pcr_2b <- R2(pcr_reg_2a)
#Getting MSE and R-Squared values from PLS
msep_pls_2b <- MSEP(pls_reg_2a)
R2_pls_2b <- R2(pls_reg_2a)
#Creating a data frame
df.2b <- data.frame(Variables = 0:13, R2_Subset = c(0,subset_R2), R2_PCR = R2_pcr_2b$val[1,1,1:14], R2_PLS = R2_pls_2b$val[1,1,1:14], MSE_Subset = c(75, subset_MSE), MSE_PCR = msep_pcr_2b$val[1,1,1:14], MSE_PLS = msep_pls_2b$val[1,1,1:14], row.names = NULL)
knitr::kable(df.2b, digits = 3, caption = "Dimension Reduction Method Comparison")
#R-squared Graph
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = R2_Subset, color = "R2_Subset"), linewidth = 1) +
geom_line(aes(y = R2_PCR, color="R2_PCR"), linewidth = 1) +
geom_line(aes(y = R2_PLS, color="R2_PLS"), linewidth = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("R-Squared") +
ggtitle("R-Squared Comparison")
#MSE Graph
ggplot(df.2b, aes(x=Variables)) +
geom_line(aes(y = MSE_Subset, color = "MSE_Subset"), linewidth = 1) +
geom_line(aes(y = MSE_PCR, color="MSE_PCR"), linewidth = 1) +
geom_line(aes(y = MSE_PLS, color="MSE_PLS"), linewidth = 1) +
scale_x_continuous(breaks = seq(1,13,2)) +
xlab("Variables") +
ylab("PMSE") +
ggtitle("Predicted Mean-Squared Error Comparison")
setwd("C:/Users/jermj/OneDrive/Desktop/H1B_Project_ML/Data")
knitr::opts_chunk$set(echo = TRUE)
H1B_Train <- read_csv("H1B_Train.csv")
H1B_Test <- read_csv("H1B_Test.csv")
library(tidyverse)
library(broom)
library(janitor)
library(glmnet)
library(leaps)
H1B_Train <- read_csv("H1B_Train.csv")
H1B_Test <- read_csv("H1B_Test.csv")
setwd("C:/Users/jermj/OneDrive/Desktop/H1B_Project_ML/Data")
H1B_Train <- read_csv("H1B_Train.csv")
